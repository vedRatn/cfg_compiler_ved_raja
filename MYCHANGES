CS306 Assignment 2B: Submission by
								
								Aditya Raj - 110050025
								Ved Ratn Dixit - 110050044

MYCHANGES 2a
------------

In scanner.ll

1) 	Added tokens "if", "else" and "goto" to detect the corresponding keywords in the cfg file.

2) 	Added the token "!" in the Regex for MetaChar

In Parser.yy

1) Modifed Grammar for detection of
	a)  executable_statement_list
		Since we have added two fundamental statements to the program structure namely "if" and "goto" 
		statement, So in order to incorporate them into the program structure we have modified the 
		definition of executable_statement_list.


	b)	assignment_statement
		Since in the grammar of Level-1 there is a possibility of a Relational_Statement on the RHS of
		'=', therefore we have added the grammar which takes into account such a case.

2) Added Grammar rules for four Statements:
	a) if_statement
		This segment deals with the "if statement" when it occurs in the structure of the program. 
		A priliminary example of Control Flow Statements.

	b) goto_statement
		This segment deals with the "goto statement" when it occurs in the structure of the program.
		This basially deals with the redirection of program from one point of execution to a different
		basic_block

	c) relational_statement
		This deals with all binary expressions of equalities and inequalities and is used in the structure
		of an if_statement and assignment_statement

	d) comparator
		This gives the parser tool to identify the 6 binary comparators namely
			i) 		<
			ii)		>
			iii)	<=
			iv)		>=
			v)		==
			vi) 	!=


MYCHANGES 2b
------------

Some Scanner Modifications
----------------------------
1) Seperate tokens were added for detection of all the binary operators.
2) A special block of scanner was added to detect <bb i>


Main Features Added
-------------------
	-ast  :	prints the ast tree of the program in designated structure in sequential order of the
			basic blocks in cfg
	-eval : a trace of the program execution is printed in realtime showing all the control flow
			information and execution of each individual statement of the program.

Implementation
--------------
Added three Ast-Classes inherited from the base Ast Class

	a) Relational_Statement
	   --------------------
	-->	This class is built with the aim of capturing everything which could occur as the condition
		clause of a control flow statement, or on the right side of lhs. The grammar is as follows:

		assignment_statement = variable '=' relational_statement ';'
		relational_statement = 
		variable | constant | relational_statement "binary_operator" relational_statement

		binary_operators themselves have a strict preference order and order of associativity as 
		per the conventions.
		operators '==' and '!=' are at a lower priority than '<' '>' '<=' '>='
		And within their priority categories they are left associative.

		To enable this structure Relational_Statement class has overloaded constuctors, one which 
		one input ( constant or variable ) and the other with three (RS , oper , RS)

		It provides a functionality of evaluate which calculates the result of the binary statement
		given the required variable map


	b) Goto_Statement
	   --------------
	-->	This is a simple statement crucial to the grammar of cfgs and is used to direct the control
		flow from the end of one basic block to starting of another. It has a single class member by
		the name of successor which keeps track of the destination basic_block.

	b) If_Else_Ast
	   -----------
	-->	Using the tools provided by the above two classes this class finally implements a structure
		capable of simple control flow redirection. Using the relational_ast as its condition and 
		two goto_statements as its true and false successors, it evaluates and directs the control
		flow of the program.
	

Details of Print_Ast()
----------------------
	In order to implement the functionality to print the program ast structure, each of the previously
	mentioned classes and the ones already in the module have a function implemented called print_ast 
	which call each other in the heirarchal structure of the classes give the desired output. The flow
	of control during the process is as follows.
	Program --> 
	Procedure --> 
	Basic_Blocks --> 
	Executable_Statements ( which could be : Assignment, Return, If_Else or Goto statement themselves )

Details of Evaluate()
---------------------
	This implementation is slightly more complicated than print ast. Here the program starts by calling
	procedure which inturn starts working with the basic_block_list. Here is what procedure does
	1) Finds the first Basic Block

	2) Calls evaluate on basic block
		i) Calls evaluate on each of its executable statement:
			This means they all use the Local_Environment passed to them to calculate whatever they
			mean to calculate, after which they modify the variables if they are supposed to.

			It is during this time only that the condition of if_else statement which is itselt a 
			relational_statement is calculated and whether the program would be redirected to its
			true_successor or false_successor is decided.

	3) Finds which the next basic block should be:
		i) For this the last statement of the current basic block is used, If it is a:
			ASSIGNMENT_STATEMENT: then sequential execution continues
			GOTO_STATEMENT: then condition_less redirection of program happens
			IF_ELSE_STATEMENT: then conditional redirection of program happend depending on the
							   binary condition.
			RETURN_STATEMENT: a '-1' is returned which tells the program that it has reached the
			end of its execution
		NOTE: A next_bb() function is implemented in each of the executable statement classes which
			  tells the program about which basic block should come next

	4)  If the end of program is reached then execution terminates or else the program goes back to
		step 2 with the basic block changed.



A number of checks were applied at appropriate points in the program to avoid errors, like:
	1) Each basic block should have a successor one way or the other.
	2) The basic block number in <bb %d> tag should be in range.



MYCHANGES 3A
------------

In this part we introduce the notion of an Arithemetic Statement. This arithemetic statement is now
used as an atomic unit in a relational statement where earlier this part was played by a variable or 
constant. The grammar for arithmetic statement which we have written is pretty intutive and un-ambi-
guos. It goes as follows:

	constant
	|
	variable
	|
	'-' constant
	|
	'-' variable
	|
	arithmetic_expression '+' arithmetic_expression
	|
	arithmetic_expression '-' arithmetic_expression
	|
	arithmetic_expression '*' arithmetic_expression
	|
	arithmetic_expression '/' arithmetic_expression
	|
	'-' '(' arithmetic_expression ')'
	|
	'(' relational_statement ')'
	;

In order for the grammar to be unambiguous the following order of priority and associativity was 
decided among the operators of arithemetic expression.

	%left '+' '-'
	%left '*' '/'


We have also broadened the scope of a declaration statement by including types float and double as
valid datatypes. For scanning these, we have introduced appropriate rules in the scanner.



MYCHANGES 3B
------------

In this part we implemented the background working of Arithmetic Expression by building the follow-
ing new classes.

1) Type_Case_Ast : public Ast
	This class is basically an envelope over another Ast class Object in which it casts the results
	of the underlying object from its initial type to some other type and returns value of the new
	type. For this it uses the Eval_Result class functions and the basic C++ typecasting.

2) Arithmetic_Expr_Ast : public Ast
	The base of all arithmetic functions which declares all functions needed by its children classes
	and defines the one which have common definition over all the inherited classes.

3) Plus_Ast : public Arithmetic_Expr_Ast
	This class has two Ast objects as its members and it returns the sum of their values as its own
	value when called for in function evaluation.

4) Minus_Ast : public Arithmetic_Expr_Ast
	This class has two Ast objects as its members and it returns the difference of their values as 
	its own	value when called for in function evaluation.

5) Division_Ast : public Arithmetic_Expr_Ast
	This class has two Ast objects as its members and it returns the quotient of their values as its
	own	value when called for in function evaluation.

6) Multiplication_Ast : public Arithmetic_Expr_Ast
	This class has two Ast objects as its members and it returns the product of their values as its
	own	value when called for in function evaluation.

7) Unary_Ast : public Arithmetic_Expr_Ast
	This class has one Ast object as its member and it returns the arithmetic negation of its value 
	as its own value when called for in function evaluation.

For each of the above mentioned classes the three basic functions
a) printAst()
b) evaluate()
c) checkAst()
are defined appropriately.

The other major part of this assignment was including the types float and double as valid types and
making the changes in symbol-table & local_environment framework so that it can handle and manage
these new types efficiently.

	This we managed by changing the basic unit of numeric data from integer to a union of int, float
	and double values. Because of this the Eval_Result_Value_Int and Float classes lost their signi-
	ficance and therefore were deleted. The set_value and get_value function of Eval_Result_value 
	class were modified and the Result_enum and Data_Type_enum were changed to accomodate for float-
	ing point values.


MYCHANGES 4a
------------

In scanner.ll : Added token "VOID" to detect the corresponding keyword in the cfg file.

In Parser.yy
	In this part we introduce the notion of a function.

	Modifed Grammar for detection of
		program:
		Since we have added function to the program structure we need to change grammar of program to 
		incorporate them. declaration_statement_list has replaced with variable_declaration_statement_list
		and function_declaration_statement_list. So now before procedure_list program can have 
		variable_declaration_statement_list or function_declaration_statement_list or a mix of these

	Added Grammar rules for
		function_declaration_statement:
			VOID NAME '(' function_parameter_list ')' ';'
			|
			VOID NAME '(' ')' ';'
		and similarly for INT, FLOAT and DOUBLE.

		function_parameter_list :
			function_parameter
			|
			function_parameter ',' function_parameter_list

		function_parameter :
			INTEGER NAME 
			|
			FLOAT NAME 
			|
			DOUBLE NAME 

MYCHANGES 4B
------------

In 4a appropriate changes were made to parse function declarations, definitions and calls.

One new class under the name Call_Ast was added inherited from the base class Ast to handle all the
functinalities concerning a function call. A crucial member of this class is an object of the proce-
dure class. The procedure class basically holds all the elements of a procedure i.e its basic blocks,
declarations etc in an appropriate structure. The Call_Ast class basically provides all the tools of
interacting with the underlying procedure. In this way it defines the two basic functions of all the
Ast classes crucial for their functioning namely:

1) void print_ast(ostream & file_buffer);
2) Eval_Result & evaluate(Local_Environment & eval_env, ostream & file_buffer);

The Call_Ast class has another member which is a list of Asts which basically hold the parameters
required for passing in a function call. These are passed in approriate form to the "evaluate" fu-
nction of the underlying procedure which returns the result in the form of an Eval_Result after 
calculating it using the arguments passed to it.

The record of all the procedures is held in a private member of the program class under the name
procedure_map. This is a map between a string and pointer to a procedure class. This way it prov-
ides means of accessing all the procedure definitions given their name and hence also provides us
a way to detect name conflicts with other functions and global variables.
To generate appropriate errors while parsing the program in case some name-conflict is detected,
we defined the following the following four functions under the program class so that it is acc-
ssible to all.

1) void variable_in_proc_map_check(string symbol, int line);
2) void procedure_in_proc_map_check(string symbol, int line);
3) bool is_program_declared(string name);
4) void global_variable_exist_error(string name, int line);


MYCHANGES 5A
------------

In This part we implemented the intermediate code generation mechanism for Control Flow Statements
and Relational Statement starting from level 0. For this we had to add the following instructions 
to the spim_instruction_table:

spim_instruction_table[slt] = new Instruction_Descriptor(slt, "slt", "slt", "", i_r_o1_op_o2, a_op_r_o1_o2);
spim_instruction_table[sgt] = new Instruction_Descriptor(sgt, "sgt", "sgt", "", i_r_o1_op_o2, a_op_r_o1_o2);
spim_instruction_table[sle] = new Instruction_Descriptor(sle, "sle", "sle", "", i_r_o1_op_o2, a_op_r_o1_o2);
spim_instruction_table[sge] = new Instruction_Descriptor(sge, "sge", "sge", "", i_r_o1_op_o2, a_op_r_o1_o2);
spim_instruction_table[seq] = new Instruction_Descriptor(seq, "seq", "seq", "", i_r_o1_op_o2, a_op_r_o1_o2);
spim_instruction_table[sne] = new Instruction_Descriptor(sne, "sne", "sne", "", i_r_o1_op_o2, a_op_r_o1_o2);
spim_instruction_table[bne] = new Instruction_Descriptor(bne, "bne", "bne", "", i_o1_op_o2_r, a_op_o1_o2_r);
spim_instruction_table[goto_op] = new Instruction_Descriptor(goto_op, "goto", "j", "", i_op_o1, a_op_o1);
spim_instruction_table[label_op] = new Instruction_Descriptor(label_op, "label", "label", "", i_op_o1, a_op_o1);

Moving on we Implemented the following three classes extending them from the Base Class Icode_Stmt
1) Label_IC_Stmt	
	This class has just one operand and no result. The operand is just a constand which signifies 
	the	label number
2) Control_Flow_IC_Stmt
	This class deals with two type of statements
		a) Goto_Stmt
			This has just one operand say i which is of type Constant and signifies a jump to the 
			basic block i. This implements unconditional branch for assembly code.
		b) Bne Type Statement
			This has two operands and one result. If the two operands are not equal then the program
			jumps to the basic block pointer by the result.

3) Compute_IC_Stmt
	This class deals with the sgt type of functions. These functions have two operands, one operator
	and one result. The value of result is set by applying operator on the two operands.

For all the above three classes the function of central importance which has been implemented is
	"print_icode(ostream & file_buffer)"

Using the spim_instruction_table and the operands, we print the intermediate in fixed format.

Another thing of fundamental importance to this part mostly going on in background is the regis-
ter allocation.
This was done using Register_Descriptor class and its functions like:

	string get_name();
    void clear_lra_symbol_list();

and also the Symbol_Table_Entry class was used with functions like.

	void free_register(Register_Descriptor * destination_reg_descr);
	void update_register(Register_Descriptor * result_reg_descr);

Every Load instruction leads to one register going from free to busy state
Every Store instruction leads to one register going from busy to free state
Every Compute instruction leads to the two operands going from busy state to free state.
Every Compute instruction leads to the result register to go from busy state to free state.
Every Control_Flow_IC_Stmt of type Bne leads to opd1 to become free and the result register
to become busy.

Whenever a new register is needed the get_new_register() of the Machine_Descriptor is called
which returns the next free register.

MY CHANGES 5B
-------------
In this assignment we had to deal with efficient register allocation for assignment statements,
relational statements and control flow statements. The lra allocation basically deals with 2 ty-
pes of statements
1) mc_2r in which all statements with information going from memory/constant to register are
dealt with. In our case this involved statements
	All the relational statements need to have there operands in a register, this loading comes 
	under the case or memory/constant to register. The branching statements like bne also deals
	with the same kind of parameters and has to undergo the same lra optimization


2) mc_2m in which all statements with information going from memory/constant to memoty are dealt
with. In our case this involved
	Assignment statements in which the rhs is either a constant or a variable.

The above cases are dealt with efficiently so as to provide efficient register allocation.

We basically had to write the compile_and_optimize() function of all the Ast children classes.
In this we recognized which statement are we dealing with. Then optimized it using appropriate
instruction format. During this process appropriate busying and freeing of registers had to be
done.

A special case of register was of particular interest in which the register allocation of a value
to a register is only temperory till this value if used. This mainly happened with the relational
statement and branching statement operands which were not already alloted a register. In this case
they were deallocated as soon as they are used once after using. This was implemented by a special
symbol_table_entry under the name "temp". Whenever taking values from registers as operands if th-
is special symbol_table_entry was found in their symbol_entry_list then they were freed of this ma-
ping between "temp" and the register after one use.


