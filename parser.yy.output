
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list procedure_name #0001 procedure_body
2: #0001 ->  <empty>
3: program ->  procedure_name #0002 procedure_body
4: #0002 ->  <empty>
5: procedure_name (NAME) ->  NAME '(' ')'
6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
7: #0003 ->  <empty>
8: procedure_body ('{') ->  '{' basic_block_list '}'
9: declaration_statement_list ->  declaration_statement
10: declaration_statement_list ->  declaration_statement_list declaration_statement
11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
12: basic_block_list ->  basic_block_list basic_block
13: basic_block_list ->  basic_block
14: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list
15: executable_statement_list ->  assignment_statement_list
16: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
17: executable_statement_list ->  assignment_statement_list if_statement
18: executable_statement_list ->  assignment_statement_list goto_statement
19: assignment_statement_list ->  <empty>
20: assignment_statement_list ->  assignment_statement_list assignment_statement
21: if_statement (IF) ->  IF '(' relational_statement ')' goto_statement ELSE goto_statement
22: goto_statement (GOTO) ->  GOTO BASIC_BLOCK ';'
23: relational_statement ->  variable
24: relational_statement ->  constant
25: relational_statement (le) ->  relational_statement le relational_statement
26: relational_statement (ge) ->  relational_statement ge relational_statement
27: relational_statement (gt) ->  relational_statement gt relational_statement
28: relational_statement (lt) ->  relational_statement lt relational_statement
29: relational_statement (eq) ->  relational_statement eq relational_statement
30: relational_statement (ne) ->  relational_statement ne relational_statement
31: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP relational_statement ';'
32: variable (NAME) ->  NAME
33: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
34: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BASIC_BLOCK
   259: NAME
   260: RETURN
   261: INTEGER
   262: IF
   263: ELSE
   264: GOTO
   265: ASSIGN_OP
   266: ne
   267: eq
   268: lt
   269: le
   270: gt
   271: ge
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
34: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_name to state 3
  3:   On declaration_statement to state 4
  4:   On NAME to state 5
  5:   On INTEGER to state 6


State 1:
34: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . procedure_name #0001 procedure_body 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 7
  1:   On declaration_statement to state 8
  2:   On NAME to state 5
  3:   On INTEGER to state 6


State 3:
3: program -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 9
  Reduce by 4: #0002 ->  . 


State 4:
9: declaration_statement_list -> declaration_statement  . 
  Reduce by 9: declaration_statement_list -> declaration_statement  . 


State 5:
5: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 10


State 6:
11: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 11


State 7:
1: program -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 12
  Reduce by 2: #0001 ->  . 


State 8:
10: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 10: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 9:
3: program -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 13
  1:   On '{' to state 14


State 10:
5: procedure_name -> NAME '('  . ')' 
  0:   On ')' to state 15


State 11:
11: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 16


State 12:
1: program -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 17
  1:   On '{' to state 14


State 13:
3: program -> procedure_name #0002 procedure_body  . 
  Reduce by 3: program -> procedure_name #0002 procedure_body  . 


State 14:
6: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
8: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 18
  1:   On basic_block_list to state 19
  2:   On declaration_statement to state 4
  3:   On basic_block to state 20
  4:   On INTEGER to state 6
  5:   On BASIC_BLOCK to state 21


State 15:
5: procedure_name -> NAME '(' ')'  . 
  Reduce by 5: procedure_name -> NAME '(' ')'  . 


State 16:
11: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 11: declaration_statement -> INTEGER NAME ';'  . 


State 17:
1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 18:
6: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 22
  1:   On declaration_statement to state 8
  2:   On INTEGER to state 6
  Reduce by 7: #0003 ->  . 


State 19:
8: procedure_body -> '{' basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 23
  1:   On basic_block to state 24
  2:   On BASIC_BLOCK to state 21


State 20:
13: basic_block_list -> basic_block  . 
  Reduce by 13: basic_block_list -> basic_block  . 


State 21:
14: basic_block -> BASIC_BLOCK  . ':' executable_statement_list 
  0:   On ':' to state 25


State 22:
6: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 26
  1:   On basic_block to state 20
  2:   On BASIC_BLOCK to state 21


State 23:
8: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 8: procedure_body -> '{' basic_block_list '}'  . 


State 24:
12: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 12: basic_block_list -> basic_block_list basic_block  . 


State 25:
14: basic_block -> BASIC_BLOCK ':'  . executable_statement_list 
  0:   On executable_statement_list to state 27
  1:   On assignment_statement_list to state 28
  Reduce by 19: assignment_statement_list ->  . 


State 26:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 29
  1:   On basic_block to state 24
  2:   On BASIC_BLOCK to state 21


State 27:
14: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 
  Reduce by 14: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 


State 28:
15: executable_statement_list -> assignment_statement_list  . 
16: executable_statement_list -> assignment_statement_list  . RETURN ';' 
17: executable_statement_list -> assignment_statement_list  . if_statement 
18: executable_statement_list -> assignment_statement_list  . goto_statement 
20: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 30
  1:   On if_statement to state 31
  2:   On goto_statement to state 32
  3:   On assignment_statement to state 33
  4:   On IF to state 34
  5:   On GOTO to state 35
  6:   On variable to state 36
  7:   On NAME to state 37
  Reduce by 15: executable_statement_list -> assignment_statement_list  . 


State 29:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 30:
16: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 38


State 31:
17: executable_statement_list -> assignment_statement_list if_statement  . 
  Reduce by 17: executable_statement_list -> assignment_statement_list if_statement  . 


State 32:
18: executable_statement_list -> assignment_statement_list goto_statement  . 
  Reduce by 18: executable_statement_list -> assignment_statement_list goto_statement  . 


State 33:
20: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 20: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 34:
21: if_statement -> IF  . '(' relational_statement ')' goto_statement ELSE goto_statement 
  0:   On '(' to state 39


State 35:
22: goto_statement -> GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 40


State 36:
31: assignment_statement -> variable  . ASSIGN_OP relational_statement ';' 
  0:   On ASSIGN_OP to state 41


State 37:
32: variable -> NAME  . 
  Reduce by 32: variable -> NAME  . 


State 38:
16: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 16: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 39:
21: if_statement -> IF '('  . relational_statement ')' goto_statement ELSE goto_statement 
  0:   On relational_statement to state 42
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 40:
22: goto_statement -> GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 46


State 41:
31: assignment_statement -> variable ASSIGN_OP  . relational_statement ';' 
  0:   On relational_statement to state 47
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 42:
21: if_statement -> IF '(' relational_statement  . ')' goto_statement ELSE goto_statement 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0:   On ')' to state 48
  1:   On le to state 49
  2:   On ge to state 50
  3:   On gt to state 51
  4:   On lt to state 52
  5:   On eq to state 53
  6:   On ne to state 54


State 43:
23: relational_statement -> variable  . 
  Reduce by 23: relational_statement -> variable  . 


State 44:
24: relational_statement -> constant  . 
  Reduce by 24: relational_statement -> constant  . 


State 45:
33: constant -> INTEGER_NUMBER  . 
  Reduce by 33: constant -> INTEGER_NUMBER  . 


State 46:
22: goto_statement -> GOTO BASIC_BLOCK ';'  . 
  Reduce by 22: goto_statement -> GOTO BASIC_BLOCK ';'  . 


State 47:
31: assignment_statement -> variable ASSIGN_OP relational_statement  . ';' 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0:   On ';' to state 55
  1:   On le to state 49
  2:   On ge to state 50
  3:   On gt to state 51
  4:   On lt to state 52
  5:   On eq to state 53
  6:   On ne to state 54


State 48:
21: if_statement -> IF '(' relational_statement ')'  . goto_statement ELSE goto_statement 
  0:   On goto_statement to state 56
  1:   On GOTO to state 35


State 49:
25: relational_statement -> relational_statement le  . relational_statement 
  0:   On relational_statement to state 57
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 50:
26: relational_statement -> relational_statement ge  . relational_statement 
  0:   On relational_statement to state 58
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 51:
27: relational_statement -> relational_statement gt  . relational_statement 
  0:   On relational_statement to state 59
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 52:
28: relational_statement -> relational_statement lt  . relational_statement 
  0:   On relational_statement to state 60
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 53:
29: relational_statement -> relational_statement eq  . relational_statement 
  0:   On relational_statement to state 61
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 54:
30: relational_statement -> relational_statement ne  . relational_statement 
  0:   On relational_statement to state 62
  1:   On variable to state 43
  2:   On constant to state 44
  3:   On NAME to state 37
  4:   On INTEGER_NUMBER to state 45


State 55:
31: assignment_statement -> variable ASSIGN_OP relational_statement ';'  . 
  Reduce by 31: assignment_statement -> variable ASSIGN_OP relational_statement ';'  . 


State 56:
21: if_statement -> IF '(' relational_statement ')' goto_statement  . ELSE goto_statement 
  0:   On ELSE to state 63


State 57:
25: relational_statement -> relational_statement le relational_statement  . 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0 (removed by precedence):   On le to state 49
  1 (removed by precedence):   On ge to state 50
  2 (removed by precedence):   On gt to state 51
  3 (removed by precedence):   On lt to state 52
  4 (removed by precedence):   On eq to state 53
  5 (removed by precedence):   On ne to state 54
  Reduce by 25: relational_statement -> relational_statement le relational_statement  . 


State 58:
26: relational_statement -> relational_statement ge relational_statement  . 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0 (removed by precedence):   On le to state 49
  1 (removed by precedence):   On ge to state 50
  2 (removed by precedence):   On gt to state 51
  3 (removed by precedence):   On lt to state 52
  4 (removed by precedence):   On eq to state 53
  5 (removed by precedence):   On ne to state 54
  Reduce by 26: relational_statement -> relational_statement ge relational_statement  . 


State 59:
27: relational_statement -> relational_statement gt relational_statement  . 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0 (removed by precedence):   On le to state 49
  1 (removed by precedence):   On ge to state 50
  2 (removed by precedence):   On gt to state 51
  3 (removed by precedence):   On lt to state 52
  4 (removed by precedence):   On eq to state 53
  5 (removed by precedence):   On ne to state 54
  Reduce by 27: relational_statement -> relational_statement gt relational_statement  . 


State 60:
28: relational_statement -> relational_statement lt relational_statement  . 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0 (removed by precedence):   On le to state 49
  1 (removed by precedence):   On ge to state 50
  2 (removed by precedence):   On gt to state 51
  3 (removed by precedence):   On lt to state 52
  4 (removed by precedence):   On eq to state 53
  5 (removed by precedence):   On ne to state 54
  Reduce by 28: relational_statement -> relational_statement lt relational_statement  . 


State 61:
29: relational_statement -> relational_statement eq relational_statement  . 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0:   On le to state 49
  1:   On ge to state 50
  2:   On gt to state 51
  3:   On lt to state 52
  4 (removed by precedence):   On eq to state 53
  5 (removed by precedence):   On ne to state 54
  Reduce by 29: relational_statement -> relational_statement eq relational_statement  . 


State 62:
30: relational_statement -> relational_statement ne relational_statement  . 
25: relational_statement -> relational_statement  . le relational_statement 
26: relational_statement -> relational_statement  . ge relational_statement 
27: relational_statement -> relational_statement  . gt relational_statement 
28: relational_statement -> relational_statement  . lt relational_statement 
29: relational_statement -> relational_statement  . eq relational_statement 
30: relational_statement -> relational_statement  . ne relational_statement 
  0:   On le to state 49
  1:   On ge to state 50
  2:   On gt to state 51
  3:   On lt to state 52
  4 (removed by precedence):   On eq to state 53
  5 (removed by precedence):   On ne to state 54
  Reduce by 30: relational_statement -> relational_statement ne relational_statement  . 


State 63:
21: if_statement -> IF '(' relational_statement ')' goto_statement ELSE  . goto_statement 
  0:   On goto_statement to state 64
  1:   On GOTO to state 35


State 64:
21: if_statement -> IF '(' relational_statement ')' goto_statement ELSE goto_statement  . 
  Reduce by 21: if_statement -> IF '(' relational_statement ')' goto_statement ELSE goto_statement  . 



